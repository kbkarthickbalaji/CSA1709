import math

def is_winner(board, player):
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def alphabeta(board, depth, alpha, beta, is_max):
    if is_winner(board, 'O'):
        return 1
    elif is_winner(board, 'X'):
        return -1
    elif is_draw(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    best = max(best, alphabeta(board, depth + 1, alpha, beta, False))
                    board[i][j] = ' '
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
            if beta <= alpha:
                break
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    best = min(best, alphabeta(board, depth + 1, alpha, beta, True))
                    board[i][j] = ' '
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
            if beta <= alpha:
                break
        return best

def best_move_ab(board):
    best_val = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = alphabeta(board, 0, -math.inf, math.inf, False)
                board[i][j] = ' '
                if move_val > best_val:
                    best_val = move_val
                    move = (i, j)
    return move

# Example usage:
board1 = [
    [' ', ' ', ' '],
    [' ', ' ', ' '],
    [' ', ' ', ' ']
]
print(f"Best move for board 1: {best_move_ab(board1)}")

board2 = [
    ['X', ' ', ' '],
    [' ', 'O', ' '],
    [' ', ' ', 'X']
]
print(f"Best move for board 2: {best_move_ab(board2)}")

board3 = [
    ['O', 'X', 'O'],
    ['X', 'X', ' '],
    [' ', 'O', ' ']
]
print(f"Best move for board 3: {best_move_ab(board3)}")
