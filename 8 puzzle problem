from queue import PriorityQueue

goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

def heuristic(state):
    cost = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                cost += abs(goal_x - i) + abs(goal_y - j)
    return cost

def get_neighbors(state):
    neighbors = []
    x, y = [(i, j) for i in range(3) for j in range(3) if state[i][j] == 0][0]
    moves = [(-1,0),(1,0),(0,-1),(0,1)]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def a_star(start):
    pq = PriorityQueue()
    pq.put((0, start))
    visited = set()
    while not pq.empty():
        _, state = pq.get()
        if state == goal_state:
            return "Solved!"
        visited.add(str(state))
        for neighbor in get_neighbors(state):
            if str(neighbor) not in visited:
                pq.put((heuristic(neighbor), neighbor))
    return "No Solution"

start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

print(a_star(start_state))
